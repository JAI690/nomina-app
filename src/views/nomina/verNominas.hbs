<!-- Descargar Excel de reporte -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js" integrity="sha512-ZfFfcp0ll1jVjeG5e7uPH1hwUyeoBUVAb3xRJpqBsH90jVegaYKv5nGOhGnUYxZg/kbYpl6EWVGvmWrbV32L9Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>


<!--
<div class="container p-4">
    <div class ="row">
        <div class="col-md-5 mx-auto">
            <div class="card">
                <div class="card-body">
                    <form class="row gx-3 gy-2 align-items-center">
                    <div class="col-md-12">
                      <label for="inputAddress" class="form-label">Empresa:</label>
                      <div class="input-group">
                            <select class="form-select" id="empresa">
                            <option selected>Seleccionar...</option>
                            </select>
                      </div>
                      
                    </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

-->

<div class="container p-4">
    <form action="/nomina/pagar" method="POST">
    <table class="table table-hover" id="myTable">
    <thead>
        <tr>
        <th scope="col">Ejecutivo</th>
        <th scope="col">Cliente</th>
        <th scope="col">Semana</th>
         <th scope="col">Creada</th>
        </tr>
    </thead>
    <tbody>
        {{#each nominas}}
            <tr>
            <td>{{nombre}}</td>
                        <td>{{nombreEmpresa}}</td>
            <td scope="row">{{semananomina}}</td>
            <td>{{dateFormat createdAt}}</td>
            <!-- <td><a href="/nomina/nomina/{{idnominas}}">Pagar</a></td> -->
            </tr>
        {{/each}}
    </tbody>
    </table>
    <input value="" name="fecha" id="fecha" hidden>
                        
    </form>
</div>


<div id="container p-4" style="margin-left: 45%;">
        <button class="btn btn-success mb-3" id="download">Exportar Excel</button>
</div>



<script>

    const tiempoTranscurrido = Date.now();
    const hoy = new Date(tiempoTranscurrido);

    let año = hoy.getFullYear().toString();
    let mes = hoy.getMonth();
    let dia = hoy.getDate();
    let hora = hoy.getHours();
    let minuto = hoy.getMinutes();
    let segundo = hoy.getSeconds();
    const cero = function(fecha){
        if(fecha<10){
            return('0'+fecha);
        }else{
            return(fecha);
        }
    }

    let fechita = año + '-' + (cero(mes+1)) + '-' + (cero(dia)) + ' ' + (cero(hora)) + ':' + (cero(minuto)) + ':' + (cero(segundo));

    let fecha = document.getElementById("fecha");
    fecha.setAttribute("value", fechita);

    

   let empresa = [];
   let empresasID = [];

    {{#each empresas}}
        empresa.push("{{nombreEmpresa}}");
        empresasID.push("{{id}}");
    {{/each}}



    const empresas = document.getElementById("empresa");
    for(i=0; i<empresa.length;i++){
        let opcion = document.createElement('option');
        opcion.setAttribute("value", empresa[i]);
        let texto = document.createTextNode(empresa[i]);
        opcion.appendChild(texto);
        empresas.appendChild(opcion);
    }

    empresas.addEventListener('change', 
    function(){
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("empresa");
        filter = empresas.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        //inputEsquema = document.getElementById("esquema");
        //inputEsquema.setAttribute("value","")
        //input.value

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
        td = tr[i].getElementsByTagName("td")[2];
        if (td) {
            txtValue = td.textContent || td.innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
            tr[i].style.display = "";
            } else {
            tr[i].style.display = "none";
            }
        }
        }
    });


    /**

 * Funcion para ordenar una tabla... tiene que recibir el numero de columna a

 * ordenar y el tipo de orden

 * @param int n

 * @param str type - ['str'|'int']

 */

function sortTable(n,type) {

  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;

 

  table = document.getElementById("myTable");

  switching = true;

  //Set the sorting direction to ascending:

  dir = "asc";

 

  /*Make a loop that will continue until no switching has been done:*/

  while (switching) {

    //start by saying: no switching is done:

    switching = false;

    rows = table.rows;

    /*Loop through all table rows (except the first, which contains table headers):*/

    for (i = 1; i < (rows.length - 1); i++) {

      //start by saying there should be no switching:

      shouldSwitch = false;

      /*Get the two elements you want to compare, one from current row and one from the next:*/

      x = rows[i].getElementsByTagName("TD")[n];

      y = rows[i + 1].getElementsByTagName("TD")[n];

      /*check if the two rows should switch place, based on the direction, asc or desc:*/

      if (dir == "asc") {

        if ((type=="str" && x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) || (type=="int" && parseFloat(x.innerHTML) > parseFloat(y.innerHTML))) {

          //if so, mark as a switch and break the loop:

          shouldSwitch= true;

          break;

        }

      } else if (dir == "desc") {

        if ((type=="str" && x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) || (type=="int" && parseFloat(x.innerHTML) < parseFloat(y.innerHTML))) {

          //if so, mark as a switch and break the loop:

          shouldSwitch = true;

          break;

        }

      }

    }

    if (shouldSwitch) {

      /*If a switch has been marked, make the switch and mark that a switch has been done:*/

      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);

      switching = true;

      //Each time a switch is done, increase this count by 1:

      switchcount ++;

    } else {

      /*If no switching has been done AND the direction is "asc", set the direction to "desc" and run the while loop again.*/

      if (switchcount == 0 && dir == "asc") {

        dir = "desc";

        switching = true;

      }

    }

  }

}



</script>

<!-- CREAR EXCEL -->
<script>

  /* Getting data */
  let data = [];
  let dataObj = {}

  {{#each operaciones}}
      dataObj = {}
      dataObj['Apellido Paterno'] = "{{apellidoPaterno}}"
      dataObj['Apellido Materno'] = "{{apellidoMaterno}}"
      dataObj['Nombre'] = "{{nombre}}"
      dataObj['Marca'] = "{{nombreEmpresa}}"
      dataObj['Banco'] = "{{banco}}"
      dataObj['Cuenta'] = "{{cuenta}}"
      dataObj['Clabe'] = "{{clabe}}"
      dataObj['Pago IMSS'] = "{{IMSSpago}}"


      data.push(dataObj);
  {{/each}}

  let dataSindicato = []

  {{#each operaciones}}
      dataObj = {}
      dataObj['Apellido Paterno'] = "{{apellidoPaterno}}"
      dataObj['Apellido Materno'] = "{{apellidoMaterno}}"
      dataObj['Nombre'] = "{{nombre}}"
      dataObj['Marca'] = "{{nombreEmpresa}}"
      dataObj['Registro Patronal'] = "{{registroPatronal}}"
      dataObj['Patron'] = "{{patron}}"
      dataObj['Banco'] = "{{banco}}"
      dataObj['Cuenta'] = "{{cuenta}}"
      dataObj['Clabe'] = "{{clabe}}"
      dataObj['Pago'] = "{{sueldoNeto}}"


      dataSindicato.push(dataObj);
  {{/each}}

  /* make the worksheet */
  const ws = XLSX.utils.json_to_sheet(data);
  const ws2 = XLSX.utils.json_to_sheet(dataSindicato);

  /* add to workbook */
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "IMSS");
  XLSX.utils.book_append_sheet(wb, ws2, "Sindicato");

  /* generate an XLSX file */
  const downloadButton = document.getElementById('download');
  downloadButton.addEventListener('click', ()=>{
    const fecha = new Date();
    const hoy = fecha.toDateString();
    XLSX.writeFile(wb, hoy+'.xlsx');
  })


</script>

