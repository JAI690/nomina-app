<div class="container p-4">
    <div class ="row">
        <div class="col-md-5 mx-auto">
            <div class="card">
                <div class="card-body">
                    <form class="row gx-3 gy-2 align-items-center">
                    <div class="col-md-12">
                      <label for="inputAddress" class="form-label">Empresa:</label>
                      <div class="input-group">
                            <select class="form-select" id="empresa">
                            </select>
                      </div>
                      
                    </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="container p-4">
    <form action="/nomina/pagar" method="POST">
    <table class="table table-hover" id="myTable">
    <thead>
        <tr>
        <th scope="col">ID</th>
        <th scope="col">Empresa</th>
        <th scope="col">Nombres</th>
        <th scope="col" onclick="sortTable(0, 'str)">Banco</th>
        <th scope="col">Cuenta</th>
        <th scope="col">Clabe Interbancaria</th>
        <th scope="col">Sueldo Neto</th>
        <th scope="col">Total a pagar</th>
        <th scope="col">Del</th>
        <th scope="col">Al</th>
        <th scope="col">Pagado</th>
        </tr>
    </thead>
    <tbody>
        {{#each operaciones}}
            <tr>
            <td scope="row">{{trabajadorId}}</td>
            <td>{{nombreEmpresa}}</td>
            <td>{{nombre}}</td>
            <td><p class="m-2">{{banco}}</p></td>
            <td><p>{{cuenta}}</p></td>
            <td><p class="m-2">{{clabe}}</p></td>
            <td><p>{{sueldoNeto}}</p></td>
            <td><p>{{totalPagar}}</p></td>
            <td><p>{{dateFormat fechaInicio}}</p></td>
            <td><p>{{dateFormat fechaFin}}</p></td>
            <td><input type="checkbox" name="estatusPago" value="{{operacionId}}"></td>
            </tr>
        {{/each}}
    </tbody>
    </table>
    <input value="" name="fecha" id="fecha" hidden>
                        <div class="col-12">
                        <div class="d-grid gap-2">
                                <button class="btn btn-primary">
                                    Pagar
                                </button>
                        </div>
                    </div>
    </form>
</div>


<script>
    //Obtener reclutadores unicos
    const tiempoTranscurrido = Date.now();
    const hoy = new Date(tiempoTranscurrido);

    let año = hoy.getFullYear().toString();
    let mes = hoy.getMonth();
    let dia = hoy.getDate();
    let hora = hoy.getHours();
    let minuto = hoy.getMinutes();
    let segundo = hoy.getSeconds();
    const cero = function(fecha){
        if(fecha<10){
            return('0'+fecha);
        }else{
            return(fecha);
        }
    }

    let fechita = año + '-' + (cero(mes+1)) + '-' + (cero(dia)) + ' ' + (cero(hora)) + ':' + (cero(minuto)) + ':' + (cero(segundo));

    let fecha = document.getElementById("fecha");
    fecha.setAttribute("value", fechita);

    

   let empresa = [];
   let empresasID = [];

    {{#each empresas}}
        empresa.push("{{nombreEmpresa}}");
        empresasID.push("{{id}}");
    {{/each}}



    const empresas = document.getElementById("empresa");
    for(i=0; i<empresa.length;i++){
        let opcion = document.createElement('option');
        opcion.setAttribute("value", empresasID[i]);
        let texto = document.createTextNode(empresa[i]);
        opcion.appendChild(texto);
        empresas.appendChild(opcion);
    }

    empresas.addEventListener('change', 
    function(){
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("empresa");
        filter = empresas.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        inputEsquema = document.getElementById("esquema");
        inputEsquema.setAttribute("value","")
        input.value
        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
        td = tr[i].getElementsByTagName("td")[1];
        if (td) {
            txtValue = td.textContent || td.innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
            tr[i].style.display = "";
            } else {
            tr[i].style.display = "none";
            }
        }
        }
    });


    /**

 * Funcion para ordenar una tabla... tiene que recibir el numero de columna a

 * ordenar y el tipo de orden

 * @param int n

 * @param str type - ['str'|'int']

 */

function sortTable(n,type) {

  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;

 

  table = document.getElementById("myTable");

  switching = true;

  //Set the sorting direction to ascending:

  dir = "asc";

 

  /*Make a loop that will continue until no switching has been done:*/

  while (switching) {

    //start by saying: no switching is done:

    switching = false;

    rows = table.rows;

    /*Loop through all table rows (except the first, which contains table headers):*/

    for (i = 1; i < (rows.length - 1); i++) {

      //start by saying there should be no switching:

      shouldSwitch = false;

      /*Get the two elements you want to compare, one from current row and one from the next:*/

      x = rows[i].getElementsByTagName("TD")[n];

      y = rows[i + 1].getElementsByTagName("TD")[n];

      /*check if the two rows should switch place, based on the direction, asc or desc:*/

      if (dir == "asc") {

        if ((type=="str" && x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) || (type=="int" && parseFloat(x.innerHTML) > parseFloat(y.innerHTML))) {

          //if so, mark as a switch and break the loop:

          shouldSwitch= true;

          break;

        }

      } else if (dir == "desc") {

        if ((type=="str" && x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) || (type=="int" && parseFloat(x.innerHTML) < parseFloat(y.innerHTML))) {

          //if so, mark as a switch and break the loop:

          shouldSwitch = true;

          break;

        }

      }

    }

    if (shouldSwitch) {

      /*If a switch has been marked, make the switch and mark that a switch has been done:*/

      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);

      switching = true;

      //Each time a switch is done, increase this count by 1:

      switchcount ++;

    } else {

      /*If no switching has been done AND the direction is "asc", set the direction to "desc" and run the while loop again.*/

      if (switchcount == 0 && dir == "asc") {

        dir = "desc";

        switching = true;

      }

    }

  }

}



</script>

<!--
    FILTRAR POR empresa DE CUENTA
    DESPLEGAR EL NOMBRE DE LA EMPRESA
    ORDENAR POR CUENTA
    PONER FECHAS LIMITE
    ->